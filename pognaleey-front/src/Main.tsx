import React, {useEffect, useRef, useState} from "react";
import "./Main.css";
import {useNavigate} from "react-router-dom";
import apiClient from "./apiClient"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º API –∫–ª–∏–µ–Ω—Ç

const Main: React.FC = () => {
    const navigate = useNavigate();
    const [selectedFilter, setSelectedFilter] = useState<string>("feed");
    const [tiles, setTiles] = useState<any[]>([]);
    const [isLoading, setIsLoading] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);
    const [page, setPage] = useState<number>(0);
    const [hasMore, setHasMore] = useState<boolean>(true);
    const [showLoginPopup, setShowLoginPopup] = useState<boolean>(false); // –í–∏–¥–∏–º–æ—Å—Ç—å –ø–æ–ø–∞–ø–∞
    const [user, setUser] = useState<{ username: string | null }>({username: null}); // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

    const observer = useRef<IntersectionObserver | null>(null);
    const lastTileRef = useRef<HTMLDivElement | null>(null);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    useEffect(() => {
        const token = localStorage.getItem("jwtToken");
        if (token) {
            // –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            const username = token ? getUsernameFromToken(token) : null;
            setUser({username: username});
        }
    }, []);

    const getUsernameFromToken = (token: string) => {
        try {
            const payloadBase64 = token.split('.')[1];
            const decodedPayload = JSON.parse(atob(payloadBase64));
            return decodedPayload.name || decodedPayload.sub || null;
        } catch (error) {
            console.error(error);
            return null;
        }
    };

    const [isDropdownVisible, setIsDropdownVisible] = useState<boolean>(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é


    const handleLogout = () => {
        localStorage.removeItem("jwtToken");
        setUser({username: null});
        navigate("/");
    };

    const handleButtonClick = () => {
        navigate(`/travel-inquiries`);
    };

    const loadTiles = async (filter: string = selectedFilter, reset: boolean = false) => {
        if (isLoading || (!reset && !hasMore)) return;

        setIsLoading(true);
        setError(null);

        const url = `${process.env.REACT_APP_API_URL}/travel-guides/${filter}?page=${reset ? 0 : page}&size=8`;

        try {
            let response;

            if (filter === "liked" || filter === "my") {
                const token = localStorage.getItem("jwtToken");
                if (!token) {
                    setShowLoginPopup(true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø–∞–ø
                    return;
                }
            }

            response = await apiClient(url);

            if (!response.ok) {
                throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö");
            }

            const data = await response.json();
            setTiles((prevTiles) => (reset ? data.content : [...prevTiles, ...data.content]));
            setPage((prevPage) => (reset ? 1 : prevPage + 1));
            setHasMore(!data.last);
        } catch (err: any) {
            setError(err.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
        } finally {
            setIsLoading(false);
        }
    };

    const handleFilterChange = (value: string) => {
        if ((value === "liked" || value === "my") && !localStorage.getItem("jwtToken")) {
            setShowLoginPopup(true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø–∞–ø, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
            return;
        }

        setSelectedFilter(value);
        setPage(0);
        setTiles([]);
        setHasMore(true);
        loadTiles(value, true).catch((err) => {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∏—Ç–æ–∫:", err);
        });
    };

    const handleLike = async (id: number, isCurrentlyLiked: boolean) => {
        try {
            const token = localStorage.getItem("jwtToken");
            if (!token) {
                setShowLoginPopup(true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø–∞–ø
                return;
            }

            const endpoint = isCurrentlyLiked
                ? `${process.env.REACT_APP_API_URL}/travel-guides/${id}/unlike`
                : `${process.env.REACT_APP_API_URL}/travel-guides/${id}/like`;

            const response = await apiClient(endpoint, {
                method: isCurrentlyLiked ? "DELETE" : "PUT",
            });

            if (!response.ok) {
                throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∞–π–∫–∞");
            }

            const {guideId, isLiked, totalLikes} = await response.json();

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∏—Ç–æ–∫
            setTiles((prevTiles) =>
                prevTiles.map((tile) =>
                    tile.id === guideId
                        ? {...tile, isLiked, totalLikes} // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∞–π–∫ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤
                        : tile
                )
            );
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∞–π–∫–∞:", error);
        }
    };


    useEffect(() => {
        loadTiles("feed", true).catch((err) => {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∏—Ç–æ–∫:", err);
        }); // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    }, []);

    useEffect(() => {
        if (observer.current) observer.current.disconnect();

        observer.current = new IntersectionObserver(
            (entries) => {
                if (entries[0].isIntersecting && hasMore && !isLoading) {
                    loadTiles(selectedFilter, false);
                }
            },
            {threshold: 1.0}
        );

        if (lastTileRef.current) {
            observer.current.observe(lastTileRef.current);
        }

        return () => observer.current?.disconnect();
    }, [lastTileRef, hasMore, isLoading]);

    return (
        <div className="main-container">
            <div className="content-container">
                <header className="header">
                    <img src="/logo-circle192.png" alt="–õ–æ–≥–æ—Ç–∏–ø" className="logo"/>
                    <nav className="navbar">
                        <a href="/" className="nav-link">–ì–ª–∞–≤–Ω–∞—è</a>
                        <a href="/contacts" className="nav-link">–ö–æ–Ω—Ç–∞–∫—Ç—ã</a>
                        <a href="/language" className="nav-link">üåê –Ø–∑—ã–∫</a>
                        <div
                            className="user-menu"
                            onMouseEnter={() => setIsDropdownVisible(true)}
                            onMouseLeave={() => setIsDropdownVisible(false)}
                        >
                            {user.username ? (
                                <>
                                    <span className="user-name">‚ú® {user.username}</span>
                                    {isDropdownVisible && (
                                        <div className="dropdown-menu">
                                            <button onClick={handleLogout}>–í—ã–π—Ç–∏</button>
                                        </div>
                                    )}
                                </>
                            ) : (
                                <a href="/login" className="nav-link">üîí –í–æ–π—Ç–∏</a>
                            )}
                        </div>
                    </nav>
                </header>
                <div className="image-container">
                    <img
                        src="/main.webp"
                        alt="Main Banner"
                        className="banner-image"
                    />
                    <div className="banner-text">
                        –ö–∞–∂–¥–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ<br/>–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∏–¥–µ–∏!
                    </div>
                    <button className="action-button" onClick={handleButtonClick}>–ü–æ–≥–Ω–∞–ª–∏!</button>
                </div>

                {/* –†–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ */}
                <div className="radio-buttons-container">
                    <label className={`radio-button ${selectedFilter === "feed" ? "active" : ""}`}>
                        <input
                            type="radio"
                            name="filter"
                            value="feed"
                            checked={selectedFilter === "feed"}
                            onChange={() => handleFilterChange("feed")}
                        />
                        –õ—É—á—à–µ–µ
                    </label>
                    <label className={`radio-button ${selectedFilter === "liked" ? "active" : ""}`}>
                        <input
                            type="radio"
                            name="filter"
                            value="liked"
                            checked={selectedFilter === "liked"}
                            onChange={() => handleFilterChange("liked")}
                        />
                        –ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å
                    </label>
                    <label className={`radio-button ${selectedFilter === "my" ? "active" : ""}`}>
                        <input
                            type="radio"
                            name="filter"
                            value="my"
                            checked={selectedFilter === "my"}
                            onChange={() => handleFilterChange("my")}
                        />
                        –ú–æ—ë
                    </label>
                </div>

                {/* –ü–ª–∏—Ç–∫–∞ */}
                <div className="tile-container">
                    {error && <div className="error">{error}</div>} {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */}
                    {tiles.map((tile, index) => (
                        <div
                            className="tile"
                            key={tile.id}
                            ref={index === tiles.length - 1 ? lastTileRef : null} /* –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç */
                            onClick={() => navigate(`/travel-guides/${tile.id}`)} // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥
                        >
                            <div className="tile-image-wrapper">
                                <img src={tile.imageUrl} alt={tile.title} className="tile-image"/>
                            </div>
                            <div className="tile-title">{tile.title}</div>
                            <div className="tile-likes">
                                <span
                                    className={`like-button ${tile.isLiked ? "liked" : ""}`}
                                    onClick={(e) => {
                                        e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∫–ª–∏–∫ –ø–æ –ø–ª–∏—Ç–∫–µ
                                        handleLike(tile.id, tile.isLiked);
                                    }}
                                >
                                    ‚ù§
                                </span>
                                {tile.totalLikes}
                            </div>
                        </div>

                    ))}
                    {isLoading &&
                        <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>}
                </div>

                {showLoginPopup && (
                    <div className="popup-overlay" onClick={() => setShowLoginPopup(false)}>
                        <div className="popup-content" onClick={(e) => e.stopPropagation()}>
                            <h3>–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã</h3>
                            <p>–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.</p>
                            <button onClick={() => navigate("/login")} className="login-button-popup">
                                –í–æ–π—Ç–∏
                            </button>
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
};

export default Main;
