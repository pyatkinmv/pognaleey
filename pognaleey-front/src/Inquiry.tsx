import React, {useState} from "react";
import {useNavigate} from "react-router-dom"; // –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
import "./Inquiry.css";
import apiClient from "./apiClient";
import Header from "./Header";
import MainContainer from "./MainContainer";

const Inquiry: React.FC = () => {
    const [formData, setFormData] = useState({
        purpose: [] as string[],
        preferences: [] as string[],
        budget: "",
        duration: "",
        transport: [] as string[],
        season: "",
        locationTo: "",
        locationFrom: "", // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ "–æ—Ç–∫—É–¥–∞"
        companions: "",
        additionalPreferences: "",
    });

    const navigate = useNavigate(); // –î–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞

    const handleChange = (
        e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>
    ) => {
        const {name, value, type} = e.target;

        if (type === "select-multiple") {
            const options = Array.from(
                (e.target as HTMLSelectElement).selectedOptions,
                (option) => option.value
            );
            setFormData({...formData, [name]: options});
        } else {
            setFormData({...formData, [name]: value});
        }
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        try {
            const response = await apiClient(`${process.env.REACT_APP_API_URL}/travel-inquiries`, {
                method: "POST",
                body: JSON.stringify(formData),
            });

            if (response.ok) {
                const data = await response.json();
                navigate(`/travel-recommendations?inquiryId=${data.id}`);
            } else {
                alert("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã.");
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞:", error);
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É.");
        }
    };

    const purposeOptions = [
        {value: "—Ä–µ–ª–∞–∫—Å–∞—Ü–∏—è", label: "–û—Ç–¥—ã—Ö –∏ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏—è", icon: "üßò"},
        {value: "–∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö", label: "–ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö", icon: "üö¥"},
        {value: "–∫—É–ª—å—Ç—É—Ä–∞", label: "–ö—É–ª—å—Ç—É—Ä–∞", icon: "üèõÔ∏è"},
        {value: "—à–æ–ø–ø–∏–Ω–≥", label: "–®–æ–ø–ø–∏–Ω–≥", icon: "üõçÔ∏è"},
        {value: "–æ–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–µ", label: "–û–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–µ", icon: "üåø"}
    ];

    const companionOptions = [
        {value: "–æ–¥–∏–Ω", label: "–û–¥–∏–Ω", icon: "üßç"},
        {value: "—Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º", label: "–° –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º", icon: "‚ù§Ô∏è"},
        {value: "—Å–µ–º—å—è", label: "–° —Å–µ–º—å—ë–π", icon: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶"},
        {value: "–¥—Ä—É–∑—å—è", label: "–° –¥—Ä—É–∑—å—è–º–∏", icon: "üë´"},
        {value: "–≥—Ä—É–ø–ø–∞", label: "–í –≥—Ä—É–ø–ø–µ", icon: "üöå"},
    ];

    const durationOptions = [
        {value: "1-3 –¥–Ω—è", label: "1-3 –¥–Ω—è"},
        {value: "4-7 –¥–Ω–µ–π", label: "4-7 –¥–Ω–µ–π"},
        {value: "8-14 –¥–Ω–µ–π", label: "8-14 –¥–Ω–µ–π"},
        {value: "–ë–æ–ª–µ–µ –¥–≤—É—Ö –Ω–µ–¥–µ–ª—å", label: "–ë–æ–ª–µ–µ –¥–≤—É—Ö –Ω–µ–¥–µ–ª—å"},
    ]

    const transportOptions = [
        {value: "–∞–≤—Ç–æ–º–æ–±–∏–ª—å", label: "–ê–≤—Ç–æ–º–æ–±–∏–ª—å", icon: "üöó"},
        {value: "—Å–∞–º–æ–ª–µ—Ç", label: "–°–∞–º–æ–ª—ë—Ç", icon: "‚úàÔ∏è"},
        {value: "–ø–æ–µ–∑–¥", label: "–ü–æ–µ–∑–¥", icon: "üöÇ"},
        {value: "–∞–≤—Ç–æ–±—É—Å", label: "–ê–≤—Ç–æ–±—É—Å", icon: "üöå"},
        {value: "–∫–æ—Ä–∞–±–ª—å", label: "–ö–æ—Ä–∞–±–ª—å", icon: "üõ≥Ô∏è"},
    ];

    const budgetOptions = [
        {value: "economy", label: "–•–æ—á—É —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å", icon: "ü™ô"}, // Economy ‚Äî –≠–∫–æ–Ω–æ–º–∏—á–Ω—ã–π
        {value: "standard", label: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π", icon: "üíµ"}, // Standard ‚Äî –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
        {value: "comfort", label: "–ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π", icon: "üí≥"}, // Comfort ‚Äî –ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π
        {value: "luxury", label: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ–º—Ñ–æ—Ä—Ç", icon: "üíé"} // Luxury ‚Äî –†–æ—Å–∫–æ—à–Ω—ã–π
    ];

    const preferencesOptions = [
        {value: "–º–æ—Ä–µ –∏ –ø–ª—è–∂–∏", label: "–ú–æ—Ä–µ –∏ –ø–ª—è–∂–∏", icon: "üèñÔ∏è"}, // –ü–ª—è–∂–Ω—ã–π –æ—Ç–¥—ã—Ö
        {value: "—Å–ø–∞", label: "–°–ü–ê", icon: "üõÄ"}, // –°–ü–ê –∏ —Ä–µ–ª–∞–∫—Å
        {value: "–≥–æ—Ä—ã", label: "–ì–æ—Ä—ã", icon: "üèîÔ∏è"}, // –ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö –≤ –≥–æ—Ä–∞—Ö
        {value: "–º–µ–≥–∞–ø–æ–ª–∏—Å", label: "–ú–µ–≥–∞–ø–æ–ª–∏—Å—ã", icon: "üèôÔ∏è"}, // –≠–∫—Å–∫—É—Ä—Å–∏–∏ –∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–π —Ç—É—Ä–∏–∑–º
        {value: "—Å–µ–ª—å—Å–∫–∞—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å", label: "–°–µ–ª—å—Å–∫–∞—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å", icon: "üêì"},
        {value: "–∫–µ–º–ø–∏–Ω–≥", label: "–ö–µ–º–ø–∏–Ω–≥", icon: "‚õ∫"}, // –°–ü–ê –∏ —Ä–µ–ª–∞–∫—Å
        {value: "–∏—Å—Ç–æ—Ä–∏—è –∏ –∫—É–ª—å—Ç—É—Ä–∞", label: "–ò—Å—Ç–æ—Ä–∏—è –∏ –∫—É–ª—å—Ç—É—Ä–∞", icon: "üé≠"}, // –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ç—É—Ä–∏–∑–º
        {value: "–ª—ã–∂–∏", label: "–ì–æ—Ä–Ω–æ–ª—ã–∂–∫–∞", icon: "üéø"}, // –õ—ã–∂–∏, —Å–Ω–µ–≥
        {value: "—Å–∞—Ñ–∞—Ä–∏", label: "–°–∞—Ñ–∞—Ä–∏", icon: "ü¶Å"}, // –≠–∫–∑–æ—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∏—Ä–æ–¥–∞, –∂–∏–≤–æ—Ç–Ω—ã–µ
        {value: "–∫—Ä—É–∏–∑", label: "–ö—Ä—É–∏–∑—ã", icon: "üõ≥Ô∏è"}, // –ú–æ—Ä—Å–∫–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è
        {value: "–µ–¥–∞", label: "–ö—É–ª–∏–Ω–∞—Ä–∏—è", icon: "üçî"}, // –ï–¥–∞ –∏ –¥–µ–≥—É—Å—Ç–∞—Ü–∏–∏
        {value: "–∞–ª–∫–æ–≥–æ–ª—å", label: "–ê–ª–∫–æ–≥–æ–ª—å", icon: "üç∑"}, // –ï–¥–∞ –∏ –¥–µ–≥—É—Å—Ç–∞—Ü–∏–∏
        {value: "—Ñ–µ—Å—Ç–∏–≤–∞–ª–∏", label: "–§–µ—Å—Ç–∏–≤–∞–ª–∏", icon: "üéâ"}, // –ï–¥–∞ –∏ –¥–µ–≥—É—Å—Ç–∞—Ü–∏–∏
        {value: "–Ω–æ—á–Ω–∞—è –∂–∏–∑–Ω—å", label: "–ù–æ—á–Ω–∞—è –∂–∏–∑–Ω—å", icon: "üåÉ"}, // –ï–¥–∞ –∏ –¥–µ–≥—É—Å—Ç–∞—Ü–∏–∏
        {value: "—ç–∫–∑–æ—Ç–∏–∫–∞", label: "–≠–∫–∑–æ—Ç–∏–∫–∞", icon: "üê™"}, // –ï–¥–∞ –∏ –¥–µ–≥—É—Å—Ç–∞—Ü–∏–∏\
        {value: "–º–∞–ª–µ–Ω—å–∫–∏–µ –≥–æ—Ä–æ–¥–∞", label: "–ú–∞–ª–µ–Ω—å–∫–∏–µ –≥–æ—Ä–æ–¥–∞", icon: "üè°"}
    ];

    const seasonOptions = [
        {value: "–∑–∏–º–∞", label: "–ó–∏–º–∞", icon: "‚ùÑÔ∏è"}, // –•–æ–ª–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞, –≥–æ—Ä–Ω–æ–ª—ã–∂–Ω—ã–π –æ—Ç–¥—ã—Ö, —Ä–æ–∂–¥–µ—Å—Ç–≤–µ–Ω—Å–∫–∏–µ —è—Ä–º–∞—Ä–∫–∏
        {value: "–≤–µ—Å–Ω–∞", label: "–í–µ—Å–Ω–∞", icon: "üå∏"}, // –¶–≤–µ—Ç–µ–Ω–∏–µ, –º—è–≥–∫–∞—è –ø–æ–≥–æ–¥–∞, —Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏
        {value: "–ª–µ—Ç–æ", label: "–õ–µ—Ç–æ", icon: "‚òÄÔ∏è"}, // –ñ–∞—Ä–∫–∞—è –ø–æ–≥–æ–¥–∞, –ø–ª—è–∂–∏, –∫–∞–Ω–∏–∫—É–ª—ã
        {value: "–æ—Å–µ–Ω—å", label: "–û—Å–µ–Ω—å", icon: "üçÇ"},
    ]

    const regionOptions = [
        {value: "—Ä–æ—Å—Å–∏—è", label: "–†–æ—Å—Å–∏—è", icon: "ü™Ü"}, // –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–∞–Ω—ã
        {value: "–µ–≤—Ä–æ–ø–∞", label: "–ï–≤—Ä–æ–ø–∞", icon: "üóº"}, // –ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ —Å—Ç—Ä–∞–Ω—ã
        {value: "–∞–∑–∏—è", label: "–ê–∑–∏—è", icon: "üêâ"}, // –í–æ—Å—Ç–æ—á–Ω–∞—è –∫—É–ª—å—Ç—É—Ä–∞
        {value: "–∞—Ñ—Ä–∏–∫–∞", label: "–ê—Ñ—Ä–∏–∫–∞", icon: "üå¥"}, // –ê—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ —Å—Ç—Ä–∞–Ω—ã
        {value: "—é–∂–Ω–∞—è –∏ —Å–µ–≤–µ—Ä–Ω–∞—è –∞–º–µ—Ä–∏–∫–∞", label: "–ê–º–µ—Ä–∏–∫–∞", icon: "üåµ"}, // –°–µ–≤–µ—Ä–Ω–∞—è –∏ –Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞
        {value: "–∞–≤—Å—Ç—Ä–∞–ª–∏—è –∏ –æ–∫–µ–∞–Ω–∏—è", label: "–ê–≤—Å—Ç—Ä–∞–ª–∏—è –∏ –û–∫–µ–∞–Ω–∏—è", icon: "üåä"}, // –ê–≤—Å—Ç—Ä–∞–ª–∏—è –∏ –æ—Å—Ç—Ä–æ–≤–∞
    ];

    const handleCardMultiSelect = (field: keyof typeof formData, value: string) => {
        setFormData((prevData) => {
            const fieldData = prevData[field]; // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è

            // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è ‚Äî —ç—Ç–æ –º–∞—Å—Å–∏–≤
            if (Array.isArray(fieldData)) {
                return {
                    ...prevData,
                    [field]: fieldData.includes(value)
                        ? fieldData.filter((v) => v !== value) // –£–¥–∞–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        : [...fieldData, value], // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                };
            }

            console.error(`Field "${field}" is not an array.`);
            return prevData; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –µ—Å–ª–∏ –ø–æ–ª–µ ‚Äî –Ω–µ –º–∞—Å—Å–∏–≤
        });
    };

    const handleCardSingleSelect = (field: keyof typeof formData, value: string) => {
        setFormData((prevData) => ({
            ...prevData,
            [field]: prevData[field] === value ? "" : value, // –°–Ω–∏–º–∞–µ–º –≤—ã–±–æ—Ä, –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –Ω–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ
        }));
    };


    return (
        <MainContainer>
            <Header/>
            <div className="form-heading">
                –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ!
            </div>

            {/* –¶–µ–ª—å –ø–æ–µ–∑–¥–∫–∏ */}
            <QuestionContainer label="–ö–∞–∫–æ–≤–∞ —Ü–µ–ª—å –≤–∞—à–µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è?">
                <div className="card-grid">
                    {purposeOptions.map((option) => (
                        <div
                            key={option.value}
                            className={`card ${formData.purpose.includes(option.value) ? "selected" : ""}`}
                            onClick={() => handleCardMultiSelect("purpose", option.value)}
                        >
                            <div className="card-icon">{option.icon}</div>
                            <div className="card-label">{option.label}</div>
                        </div>
                    ))}
                </div>
            </QuestionContainer>


            {/* –í–æ–ø—Ä–æ—Å –æ –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞—Ö */}
            {/* –¶–µ–ª—å –ø–æ–µ–∑–¥–∫–∏ */}
            <QuestionContainer label="–° –∫–µ–º –≤—ã –ø—É—Ç–µ—à–µ—Å—Ç–≤—É–µ—Ç–µ?">
                <div className="card-grid">
                    {companionOptions.map((option) => (
                        <div
                            key={option.value}
                            className={`card ${formData.companions === option.value ? "selected" : ""}`}
                            onClick={() => handleCardSingleSelect("companions", option.value)}
                        >
                            <div className="card-icon">{option.icon}</div>
                            <div className="card-label">{option.label}</div>
                        </div>
                    ))}
                </div>
            </QuestionContainer>

            <QuestionContainer label="–ö–∞–∫–æ–π –≤–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?">
                <div className="card-grid">
                    {transportOptions.map((option) => (
                        <div
                            key={option.value}
                            className={`card ${formData.transport.includes(option.value) ? "selected" : ""}`}
                            onClick={() => handleCardMultiSelect("transport", option.value)}
                        >
                            <div className="card-icon">{option.icon}</div>
                            <div className="card-label">{option.label}</div>
                        </div>
                    ))}
                </div>
            </QuestionContainer>

            {/* –ë—é–¥–∂–µ—Ç */}
            <QuestionContainer label="–ö–∞–∫–æ–≤ –≤–∞—à –±—é–¥–∂–µ—Ç –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ?">
                <div className="card-grid">
                    {budgetOptions.map((option) => (
                        <div
                            key={option.value}
                            className={`card ${formData.budget === option.value ? "selected" : ""}`}
                            onClick={() => handleCardSingleSelect("budget", option.value)}
                        >
                            <div className="card-icon">{option.icon}</div>
                            <div className="card-label">{option.label}</div>
                        </div>
                    ))}
                </div>
            </QuestionContainer>

            {/* –ö—É–¥–∞ */}
            <QuestionContainer label="–ö—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–µ—Ö–∞—Ç—å?">
                <div className="card-grid">
                    {regionOptions.map((option) => (
                        <div
                            key={option.value}
                            className={`card ${formData.locationTo === option.value ? "selected" : ""} card-narrow`}
                            onClick={() => handleCardSingleSelect("locationTo", option.value)}
                        >
                            <div className="card-icon">{option.icon}</div>
                            <div className="card-label">{option.label}</div>
                        </div>
                    ))}
                </div>
            </QuestionContainer>

            {/* –í–æ–ø—Ä–æ—Å –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö */}
            <QuestionContainer label="–ö–∞–∫–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —É—Å–ª–æ–≤–∏—è –æ—Ç–¥—ã—Ö–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?">
                <div className="card-grid">
                    {preferencesOptions.map((option) => (
                        <div
                            key={option.value}
                            className={`card ${formData.preferences.includes(option.value) ? "selected" : ""} card-small`}
                            onClick={() => handleCardMultiSelect("preferences", option.value)}
                        >
                            <div className="card-icon">{option.icon}</div>
                            <div className="card-label">{option.label}</div>
                        </div>
                    ))}
                </div>
            </QuestionContainer>

            {/* –°–µ–∑–æ–Ω */}
            <QuestionContainer label="–ö–æ–≥–¥–∞ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å?">
                <div className="card-grid">
                    {seasonOptions.map((option) => (
                        <div
                            key={option.value}
                            className={`card ${formData.season === option.value ? "selected" : ""}`}
                            onClick={() => handleCardSingleSelect("season", option.value)}
                        >
                            <div className="card-icon">{option.icon}</div>
                            <div className="card-label">{option.label}</div>
                        </div>
                    ))}
                </div>
            </QuestionContainer>

            {/* –í–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ */}
            <QuestionContainer label="–ö–∞–∫–æ–≤–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–µ–π –ø–æ–µ–∑–¥–∫–∏?">
                <div className="card-grid">
                    {durationOptions.map((option) => (
                        <div
                            key={option.value}
                            className={`card ${formData.duration === option.value ? "selected" : ""} card-short`}
                            onClick={() => handleCardSingleSelect("duration", option.value)}
                        >
                            <div className="card-label">{option.label}</div>
                        </div>
                    ))}
                </div>
            </QuestionContainer>

            {/* –í–æ–ø—Ä–æ—Å: –û—Ç–∫—É–¥–∞ –≤—ã –Ω–∞—á–Ω–µ—Ç–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ? */}
            <QuestionContainer label="–û—Ç–∫—É–¥–∞ –≤—ã –Ω–∞—á–Ω–µ—Ç–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ?">
                <input
                    type="text"
                    name="locationFrom"
                    value={formData.locationFrom}
                    onChange={handleChange}
                    maxLength={25} // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥"
                    className="text-input"
                />
            </QuestionContainer>

            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è */}
            <QuestionContainer label="–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è?">
                <input
                    type="text"
                    name="additionalPreferences"
                    value={formData.additionalPreferences}
                    onChange={handleChange}
                    maxLength={50} // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
                    placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏"
                    className="text-input"
                />
            </QuestionContainer>

            {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
            <button className="button" type="submit" onClick={handleSubmit}>
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å
            </button>
        </MainContainer>
    );
};

interface QuestionContainerProps {
    label: string;
    children: React.ReactNode;
}

const QuestionContainer: React.FC<QuestionContainerProps> = ({label, children}) => (
    <div className="question-container">
        <label>{label}</label>
        {children}
    </div>
);

export default Inquiry;
