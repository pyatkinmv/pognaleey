import React, {useState} from "react";
import {useNavigate} from "react-router-dom"; // –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
import "./Inquiry.css";
import apiClient from "./apiClient";
import Header from "./Header";
import MainContainer from "./MainContainer";
import {useTranslation} from "react-i18next";


const Inquiry: React.FC = () => {
    const [formData, setFormData] = useState({
        purpose: [] as string[],
        preferences: [] as string[],
        budget: "",
        duration: "",
        transport: [] as string[],
        season: "",
        locationTo: "",
        locationFrom: "", // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ "–æ—Ç–∫—É–¥–∞"
        companions: "",
        additionalPreferences: "",
    });

    const navigate = useNavigate(); // –î–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞

    const handleChange = (
        e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>
    ) => {
        const {name, value, type} = e.target;

        if (type === "select-multiple") {
            const options = Array.from(
                (e.target as HTMLSelectElement).selectedOptions,
                (option) => option.value
            );
            setFormData({...formData, [name]: options});
        } else {
            setFormData({...formData, [name]: value});
        }
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        try {
            const response = await apiClient(`${process.env.REACT_APP_API_URL}/travel-inquiries`, {
                method: "POST",
                body: JSON.stringify(formData),
            });

            if (response.ok) {
                const data = await response.json();
                navigate(`/travel-recommendations?inquiryId=${data.id}`);
            } else {
                alert("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã.");
            }
        } catch (error) {
            console.error(t("error"), error);
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É.");
        }
    };

    const {t} = useTranslation();

    const purposeOptions = [
        {value: t("inquiry.relaxation"), label: t("inquiry.relaxation"), icon: "üßò"},
        {value: t("inquiry.activeRest"), label: t("inquiry.activeRest"), icon: "üö¥"},
        {value: t("inquiry.culture"), label: t("inquiry.culture"), icon: "üèõÔ∏è"},
        {value: t("inquiry.shopping"), label: t("inquiry.shopping"), icon: "üõçÔ∏è"},
        {value: t("inquiry.wellness"), label: t("inquiry.wellness"), icon: "üåø"}
    ];

    const companionOptions = [
        {value: t("inquiry.alone"), label: t("inquiry.alone"), icon: "üßç"},
        {value: t("inquiry.withPartner"), label: t("inquiry.withPartner"), icon: "‚ù§Ô∏è"},
        {value: t("inquiry.family"), label: t("inquiry.family"), icon: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶"},
        {value: t("inquiry.friends"), label: t("inquiry.friends"), icon: "üë´"},
        {value: t("inquiry.group"), label: t("inquiry.group"), icon: "üöå"}
    ];

    const durationOptions = [
        {value: t("inquiry.1-3Days"), label: t("inquiry.1-3Days")},
        {value: t("inquiry.4-7Days"), label: t("inquiry.4-7Days")},
        {value: t("inquiry.8-14Days"), label: t("inquiry.8-14Days")},
        {value: t("inquiry.moreThanTwoWeeks"), label: t("inquiry.moreThanTwoWeeks")}
    ];

    const transportOptions = [
        {value: t("inquiry.car"), label: t("inquiry.car"), icon: "üöó"},
        {value: t("inquiry.plane"), label: t("inquiry.plane"), icon: "‚úàÔ∏è"},
        {value: t("inquiry.train"), label: t("inquiry.train"), icon: "üöÇ"},
        {value: t("inquiry.bus"), label: t("inquiry.bus"), icon: "üöå"},
        {value: t("inquiry.ship"), label: t("inquiry.ship"), icon: "üõ≥Ô∏è"}
    ];

    const budgetOptions = [
        {value: t("inquiry.economy"), label: t("inquiry.economy"), icon: "ü™ô"},
        {value: t("inquiry.standard"), label: t("inquiry.standard"), icon: "üíµ"},
        {value: t("inquiry.comfort"), label: t("inquiry.comfort"), icon: "üí≥"},
        {value: t("inquiry.luxury"), label: t("inquiry.luxury"), icon: "üíé"}
    ];

    const preferencesOptions = [
        {value: t("inquiry.seaAndBeaches"), label: t("inquiry.seaAndBeaches"), icon: "üèñÔ∏è"},
        {value: t("inquiry.spa"), label: t("inquiry.spa"), icon: "üõÄ"},
        {value: t("inquiry.mountains"), label: t("inquiry.mountains"), icon: "üèîÔ∏è"},
        {value: t("inquiry.megapolis"), label: t("inquiry.megapolis"), icon: "üèôÔ∏è"},
        {value: t("inquiry.countryside"), label: t("inquiry.countryside"), icon: "üêì"},
        {value: t("inquiry.camping"), label: t("inquiry.camping"), icon: "‚õ∫"},
        {value: t("inquiry.historyAndCulture"), label: t("inquiry.historyAndCulture"), icon: "üé≠"},
        {value: t("inquiry.skiing"), label: t("inquiry.skiing"), icon: "üéø"},
        {value: t("inquiry.safari"), label: t("inquiry.safari"), icon: "ü¶Å"},
        {value: t("inquiry.cruise"), label: t("inquiry.cruise"), icon: "üõ≥Ô∏è"},
        {value: t("inquiry.food"), label: t("inquiry.food"), icon: "üçî"},
        {value: t("inquiry.alcohol"), label: t("inquiry.alcohol"), icon: "üç∑"},
        {value: t("inquiry.festivals"), label: t("inquiry.festivals"), icon: "üéâ"},
        {value: t("inquiry.nightLife"), label: t("inquiry.nightLife"), icon: "üåÉ"},
        {value: t("inquiry.exotic"), label: t("inquiry.exotic"), icon: "üê™"},
        {value: t("inquiry.smallTowns"), label: t("inquiry.smallTowns"), icon: "üè°"}
    ];

    const seasonOptions = [
        {value: t("inquiry.winter"), label: t("inquiry.winter"), icon: "‚ùÑÔ∏è"},
        {value: t("inquiry.spring"), label: t("inquiry.spring"), icon: "üå∏"},
        {value: t("inquiry.summer"), label: t("inquiry.summer"), icon: "‚òÄÔ∏è"},
        {value: t("inquiry.autumn"), label: t("inquiry.autumn"), icon: "üçÇ"}
    ];

    const regionOptions = [
        {value: t("inquiry.russia"), label: t("inquiry.russia"), icon: "ü™Ü"},
        {value: t("inquiry.europe"), label: t("inquiry.europe"), icon: "üóº"},
        {value: t("inquiry.asia"), label: t("inquiry.asia"), icon: "üêâ"},
        {value: t("inquiry.africa"), label: t("inquiry.africa"), icon: "üå¥"},
        {value: t("inquiry.america"), label: t("inquiry.america"), icon: "üåµ"},
        {value: t("inquiry.australiaOceania"), label: t("inquiry.australiaOceania"), icon: "üåä"}
    ];

    const handleCardMultiSelect = (field: keyof typeof formData, value: string) => {
        setFormData((prevData) => {
            const fieldData = prevData[field]; // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è

            // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è ‚Äî —ç—Ç–æ –º–∞—Å—Å–∏–≤
            if (Array.isArray(fieldData)) {
                return {
                    ...prevData,
                    [field]: fieldData.includes(value)
                        ? fieldData.filter((v) => v !== value) // –£–¥–∞–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        : [...fieldData, value], // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                };
            }

            console.error(`Field "${field}" is not an array.`);
            return prevData; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –µ—Å–ª–∏ –ø–æ–ª–µ ‚Äî –Ω–µ –º–∞—Å—Å–∏–≤
        });
    };

    const handleCardSingleSelect = (field: keyof typeof formData, value: string) => {
        setFormData((prevData) => ({
            ...prevData,
            [field]: prevData[field] === value ? "" : value, // –°–Ω–∏–º–∞–µ–º –≤—ã–±–æ—Ä, –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –Ω–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ
        }));
    };


    return (
        <MainContainer>
            <Header/>
            <div className="form-heading">
                {t("answerQuestions")}
            </div>

            {/* –¶–µ–ª—å –ø–æ–µ–∑–¥–∫–∏ */}
            <QuestionContainer label={t("purposeOfTravel")}>
                <div className="card-grid">
                    {purposeOptions.map((option) => (
                        <div
                            key={option.value}
                            className={`card ${formData.purpose.includes(option.value) ? "selected" : ""}`}
                            onClick={() => handleCardMultiSelect("purpose", option.value)}
                        >
                            <div className="card-icon">{option.icon}</div>
                            <div className="card-label">{option.label}</div>
                        </div>
                    ))}
                </div>
            </QuestionContainer>


            {/* –í–æ–ø—Ä–æ—Å –æ –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞—Ö */}
            {/* –¶–µ–ª—å –ø–æ–µ–∑–¥–∫–∏ */}
            <QuestionContainer label={t("travelCompanions")}>
                <div className="card-grid">
                    {companionOptions.map((option) => (
                        <div
                            key={option.value}
                            className={`card ${formData.companions === option.value ? "selected" : ""}`}
                            onClick={() => handleCardSingleSelect("companions", option.value)}
                        >
                            <div className="card-icon">{option.icon}</div>
                            <div className="card-label">{option.label}</div>
                        </div>
                    ))}
                </div>
            </QuestionContainer>

            <QuestionContainer label={t("preferredTransport")}>
                <div className="card-grid">
                    {transportOptions.map((option) => (
                        <div
                            key={option.value}
                            className={`card ${formData.transport.includes(option.value) ? "selected" : ""}`}
                            onClick={() => handleCardMultiSelect("transport", option.value)}
                        >
                            <div className="card-icon">{option.icon}</div>
                            <div className="card-label">{option.label}</div>
                        </div>
                    ))}
                </div>
            </QuestionContainer>

            {/* –ë—é–¥–∂–µ—Ç */}
            <QuestionContainer label={t("budget")}>
                <div className="card-grid">
                    {budgetOptions.map((option) => (
                        <div
                            key={option.value}
                            className={`card ${formData.budget === option.value ? "selected" : ""}`}
                            onClick={() => handleCardSingleSelect("budget", option.value)}
                        >
                            <div className="card-icon">{option.icon}</div>
                            <div className="card-label">{option.label}</div>
                        </div>
                    ))}
                </div>
            </QuestionContainer>

            {/* –ö—É–¥–∞ */}
            <QuestionContainer label={t("destination")}>
                <div className="card-grid">
                    {regionOptions.map((option) => (
                        <div
                            key={option.value}
                            className={`card ${formData.locationTo === option.value ? "selected" : ""} card-narrow`}
                            onClick={() => handleCardSingleSelect("locationTo", option.value)}
                        >
                            <div className="card-icon">{option.icon}</div>
                            <div className="card-label">{option.label}</div>
                        </div>
                    ))}
                </div>
            </QuestionContainer>

            {/* –í–æ–ø—Ä–æ—Å –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö */}
            <QuestionContainer label={t("preferences")}>
                <div className="card-grid">
                    {preferencesOptions.map((option) => (
                        <div
                            key={option.value}
                            className={`card ${formData.preferences.includes(option.value) ? "selected" : ""} card-small`}
                            onClick={() => handleCardMultiSelect("preferences", option.value)}
                        >
                            <div className="card-icon">{option.icon}</div>
                            <div className="card-label">{option.label}</div>
                        </div>
                    ))}
                </div>
            </QuestionContainer>

            {/* –°–µ–∑–æ–Ω */}
            <QuestionContainer label={t("travelSeason")}>
                <div className="card-grid">
                    {seasonOptions.map((option) => (
                        <div
                            key={option.value}
                            className={`card ${formData.season === option.value ? "selected" : ""}`}
                            onClick={() => handleCardSingleSelect("season", option.value)}
                        >
                            <div className="card-icon">{option.icon}</div>
                            <div className="card-label">{option.label}</div>
                        </div>
                    ))}
                </div>
            </QuestionContainer>

            {/* –í–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ */}
            <QuestionContainer label={t("travelDuration")}>
                <div className="card-grid">
                    {durationOptions.map((option) => (
                        <div
                            key={option.value}
                            className={`card ${formData.duration === option.value ? "selected" : ""} card-short`}
                            onClick={() => handleCardSingleSelect("duration", option.value)}
                        >
                            <div className="card-label">{option.label}</div>
                        </div>
                    ))}
                </div>
            </QuestionContainer>

            {/* –í–æ–ø—Ä–æ—Å: –û—Ç–∫—É–¥–∞ –≤—ã –Ω–∞—á–Ω–µ—Ç–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ? */}
            <QuestionContainer label={t("departureLocation")}>
                <input
                    type="text"
                    name="locationFrom"
                    value={formData.locationFrom}
                    onChange={handleChange}
                    maxLength={25} // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
                    placeholder={t("enterYourCity")}
                    className="text-input"
                />
            </QuestionContainer>

            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è */}
            <QuestionContainer label={t("additionalPreferences")}>
                <input
                    type="text"
                    name="additionalPreferences"
                    value={formData.additionalPreferences}
                    onChange={handleChange}
                    maxLength={50} // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
                    placeholder={t("writeAdditionalDetails")}
                    className="text-input"
                />
            </QuestionContainer>

            {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
            <button className="button" type="submit" onClick={handleSubmit}>
                {t("submit")}
            </button>
        </MainContainer>
    );
};

interface QuestionContainerProps {
    label: string;
    children: React.ReactNode;
}

const QuestionContainer: React.FC<QuestionContainerProps> = ({label, children}) => (
    <div className="question-container">
        <label>{label}</label>
        {children}
    </div>
);

export default Inquiry;
